#!/bin/bash
# Hari menu v3.0 based on afaneh menu

# Variables
DIR=`readlink -f .`
PARENT_DIR=`readlink -f ${DIR}/..`

export PLATFORM_VERSION=11
export ANDROID_MAJOR_VERSION=r
export SEC_BUILD_CONF_VENDOR_BUILD_OS=13
export CROSS_COMPILE=$DIR/toolchain/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-
export CLANG_TRIPLE=$DIR/toolchain/clang/host/linux-x86/clang-r383902/bin/aarch64-linux-gnu-
export ARCH=arm64
export LINUX_GCC_CROSS_COMPILE_PREBUILTS_BIN=$DIR/toolchain/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin
export CLANG_PREBUILT_BIN=$DIR/toolchain/clang/host/linux-x86/clang-r383902/bin
export PATH=$PATH:$LINUX_GCC_CROSS_COMPILE_PREBUILTS_BIN:$CLANG_PREBUILT_BIN
export LLVM=1

# Color
ON_BLUE=`echo -e "\033[44m"`	# On Blue
RED=`echo -e "\033[1;31m"`	# Red
BLUE=`echo -e "\033[1;34m"`	# Blue
GREEN=`echo -e "\033[1;32m"`	# Green
Under_Line=`echo -e "\e[4m"`	# Text Under Line
STD=`echo -e "\033[0m"`		# Text Clear

# Functions
pause(){
  read -p "${RED}$2${STD}Press ${BLUE}[Enter]${STD} key to $1..." fackEnterKey
}

toolchain(){
  if [ ! -d $PARENT_DIR/aarch64-linux-android-4.9 ]; then
    pause 'clone Toolchain aarch64-linux-android-4.9 cross compiler'
    git clone --branch android-9.0.0_r59 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 $PARENT_DIR/aarch64-linux-android-4.9
    . $DIR/build_menu
  fi
}

clang(){
  if [ ! -d $PARENT_DIR/clang-r383902 ]; then
    pause 'clone Android Clang/LLVM Prebuilts'
    git clone https://github.com/AOSP-10/prebuilts_clang_host_linux-x86_clang-r383902 $PARENT_DIR/clang-r383902
    . $DIR/build_menu
  fi
}

clean(){
  echo "${GREEN}***** Cleaning in Progress *****${STD}"
  make clean -j$(nproc)
  make mrproper -j$(nproc)
  [ -d "out" ] && rm -rf out
  echo "${GREEN}***** Cleaning Done *****${STD}"
}

build_kernel(){
  KERNEL_MAKE_ENV="LOCALVERSION=-TQMatvey-v${tqmatveykernelver}-OneUI"
  echo "${GREEN}***** Compiling kernel for ${VARIANT} *****${STD}"
  [ ! -d "out" ] && mkdir out
  make -j$(nproc) -C $(pwd) $KERNEL_MAKE_ENV tqmatvey_${VARIANT}_defconfig
  make -j$(nproc) -C $(pwd) $KERNEL_MAKE_ENV

  [ -e arch/arm64/boot/Image.gz ] && cp arch/arm64/boot/Image.gz $(pwd)/out/Image.gz
  if [ -e arch/arm64/boot/Image ]; then
    cp arch/arm64/boot/Image $(pwd)/out/Image

    DTB_DIR=$(pwd)/arch/arm64/boot/dts
    $(pwd)/tools/mkdtimg cfg_create $(pwd)/out/dtb.img dt.configs/exynos2100.cfg -d ${DTB_DIR}/exynos
    $(pwd)/tools/mkdtimg cfg_create $(pwd)/out/dtbo.img dt.configs/${VARIANT}.cfg -d ${DTB_DIR}/samsung/${VARIANT}
    echo "${GREEN}***** Ready to Roar *****${STD}"
  else
    echo 'Error'
  fi
}

install-kernel-modules(){
    [ -d "$2" ] && rm -rf $2
    mkdir -p $2
    sed -e 's/\(.*kernel.*\):/\/\1:/g' -e 's/ \([^ ]*kernel[^ ]*\)/ \/\1/g' $1/modules.dep > $2/modules.dep
    cp $1/modules.softdep $2
    cp $1/modules.alias $2
    for MOD in $modules; do
        MODULE="$(basename $MOD)"
        sed -i "s|\(.*kernel.*\)\/$MODULE:|/lib/modules/$MODULE:|" $2/modules.dep
        sed -i "s| \([^ ]*kernel.*\)\/$MODULE| /lib/modules/$MODULE|" $2/modules.dep
        basename $MOD >> $2/modules.load;
        cp $MOD $2
    done
}

build_kernel_modules(){
  if [ -e $DIR/arch/arm64/boot/Image ]; then
    # Build modules
    echo "${GREEN}***** Installing Kernel Modules *****${STD}"
    [ ! -d "out/tmp_modules" ] && mkdir -p out/tmp_modules
    make -j$(nproc) -C $(pwd) $KERNEL_MAKE_ENV modules
    make -j$(nproc) -C $(pwd) $KERNEL_MAKE_ENV INSTALL_MOD_STRIP=1 INSTALL_MOD_PATH=$(pwd)/out/tmp_modules modules_install

    kernel_release=$(cat include/config/kernel.release)
    kernel_modules_dir=$DIR/out/tmp_modules/lib/modules/$kernel_release
    kernel_modules_out=$DIR/out/lib/modules
    modules=$(find $kernel_modules_dir -type f -name '*.ko');

    install-kernel-modules $kernel_modules_dir $kernel_modules_out
    [ -d "out/tmp_modules" ] && rm -rf out/tmp_modules
    echo "${GREEN}***** Ready to Roar *****${STD}"
    pause 'continue'
  else
    pause 'return to Main menu' 'Build kernel first, '
  fi
}

anykernel3(){
  if [ ! -d $PARENT_DIR/AnyKernel3 ]; then
    pause 'clone AnyKernel3 - Flashable Zip Template'
    git clone https://github.com/osm0sis/AnyKernel3 $PARENT_DIR/AnyKernel3
  fi
  [ -e $PARENT_DIR/${VARIANT}_kernel.zip ] && rm $PARENT_DIR/${VARIANT}_kernel.zip
  if [ -e $DIR/arch/arm64/boot/Image ]; then
    cd $PARENT_DIR/AnyKernel3
    git reset --hard
    cp $DIR/arch/arm64/boot/Image zImage
    cp $DIR/out/dtbo.img dtbo.img
    sed -i "s/ExampleKernel by osm0sis/${VARIANT} Kernel by TQMatvey/g" anykernel.sh
    sed -i "s/=maguro/=${VARIANT}/g" anykernel.sh
    sed -i "s/=toroplus/=/g" anykernel.sh
    sed -i "s/=toro/=/g" anykernel.sh
    sed -i "s/=tuna/=/g" anykernel.sh
    sed -i "s/omap\/omap_hsmmc\.0\/by-name\/boot/13100000\.ufs\/by-name\/boot/g" anykernel.sh
    sed -i "s/backup_file/#backup_file/g" anykernel.sh
    sed -i "s/replace_string/#replace_string/g" anykernel.sh
    sed -i "s/insert_line/#insert_line/g" anykernel.sh
    sed -i "s/append_file/#append_file/g" anykernel.sh
    sed -i "s/patch_fstab/#patch_fstab/g" anykernel.sh
    sed -i "s/## end boot install/flash_dtbo/g" anykernel.sh

    zip -r9 $PARENT_DIR/${releasefilename}.zip * -x .git README.md *placeholder
    cd $DIR
  else
    echo 'Done building Flashable zip for ${VARIANT}'
  fi
}

build_kernel_p3s(){
  read -p "Enter Kernel Release Version v" tqmatveykernelver
  VARIANT=p3s
  build_kernel
  curtime=`date +"%m_%d_%H%M"`
  releasefilename=TQMatvey_Kernel_Test_${curtime}_${VARIANT}
  anykernel3
#  clean
}

# Run once
toolchain
clang

# Show menu
show_menus(){
  echo "${ON_BLUE} B U I L D - M E N U ${STD}"
  echo "1. ${Under_Line}B${STD}uild kernel for p3s"
  echo "2. Build kernel ${Under_Line}m${STD}odules"
  echo "3. ${Under_Line}C${STD}lean"
  echo "4. Make ${Under_Line}f${STD}lashable zip"
  echo "5. E${Under_Line}x${STD}it"
}

# Read input
read_options(){
  local choice
  read -p "Enter choice [ 1 - 5] " choice
  case $choice in
    1|b|B) build_kernel_p3s ;;
    2|m|M) build_kernel_modules ;;
    3|c|C) clean ;;
    4|f|F) anykernel3;;
    5|x|X) exit 0;;
    *) pause 'return to Main menu' 'Invalid option, '
  esac
}

# Trap CTRL+C, CTRL+Z and quit singles
trap '' SIGINT SIGQUIT SIGTSTP

# Step # Main logic - infinite loop
while true
do
  show_menus
  read_options
done
